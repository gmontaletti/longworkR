% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impact_integration_simple.R
\name{prepare_impact_data_simple}
\alias{prepare_impact_data_simple}
\title{Simple Impact Data Preparation (Fallback Approach)}
\usage{
prepare_impact_data_simple(
  metrics_output,
  treatment_data,
  id_column = "cf",
  time_column = "period",
  outcome_vars = NULL,
  verbose = TRUE
)
}
\arguments{
\item{metrics_output}{data.table or list. Output from
\code{\link{calculate_comprehensive_impact_metrics}}}

\item{treatment_data}{data.table. Treatment assignment with columns for the
individual identifier (default: "cf") and treatment indicator ("is_treated")}

\item{id_column}{character. Name of the individual identifier column. Default: "cf"}

\item{time_column}{character. Name of the time period column. Default: "period"}

\item{outcome_vars}{character vector or NULL. Outcome variables to include.
If NULL, automatically detects numeric columns. Default: NULL}

\item{verbose}{logical. Whether to print processing information. Default: TRUE}
}
\value{
data.table with the following structure:
\itemize{
\item \strong{Individual identifiers}: Column specified by id_column
\item \strong{Treatment indicator}: "is_treated" (0/1)
\item \strong{Time variables}: Original time column and binary "post" variable
\item \strong{Outcome variables}: Selected metrics for analysis
}

The output is compatible with \code{\link{difference_in_differences}} and other
impact evaluation functions.
}
\description{
A minimalist, robust alternative to \code{\link{prepare_metrics_for_impact_analysis}}
for users experiencing person count issues or complex data processing errors.
This function takes a straightforward approach with clear, predictable behavior.
}
\details{
This function provides a simplified, reliable alternative for preparing employment
metrics data for difference-in-differences analysis. It focuses on:

\subsection{Key Design Principles}{
\itemize{
\item \strong{Minimalist approach}: Only essential transformations
\item \strong{Fail-fast design}: Clear error messages with early detection
\item \strong{No silent transformations}: All operations are explicit and logged
\item \strong{Preserve data integrity}: No automatic control group expansion
\item \strong{Direct merge strategy}: Simple left join with validation
}}

\subsection{Core Operations}{
\enumerate{
\item \strong{Input validation}: Verify data structure and required columns
\item \strong{Format conversion}: Convert list output to data.table if needed
\item \strong{Outcome detection}: Auto-detect numeric outcome variables
\item \strong{Simple merge}: Left join metrics with treatment assignment
\item \strong{Time variable creation}: Create binary "post" variable from time column
\item \strong{Column selection}: Select final variables for analysis
}}

\subsection{Differences from Main Function}{
Unlike the main \code{prepare_metrics_for_impact_analysis()} function, this approach:
\itemize{
\item \strong{No control group expansion}: Users must provide pre/post data
\item \strong{No complex deduplication}: Requires person-level treatment data
\item \strong{No event-level conversion}: Works with data as provided
\item \strong{Minimal validation}: Basic checks only, user responsible for data quality
\item \strong{Limited error recovery}: Fails clearly rather than attempting fixes
}}
}
\examples{
\dontrun{
# ===== BASIC USAGE WITH EMPLOYMENT METRICS =====
# Load sample data
sample_data <- readRDS(system.file("data", "sample.rds", package = "longworkR"))

# Calculate employment metrics
metrics_result <- calculate_comprehensive_impact_metrics(
  data = sample_data,
  metrics = c("stability", "quality"),
  output_format = "wide"
)

# Create person-level treatment assignment
treatment_data <- data.table(
  cf = unique(sample_data$cf),
  is_treated = sample(c(0, 1), length(unique(sample_data$cf)), replace = TRUE)
)

# Simple preparation for DiD
did_data_simple <- prepare_impact_data_simple(
  metrics_output = metrics_result,
  treatment_data = treatment_data,
  outcome_vars = c("employment_rate", "permanent_contract_rate")
)

# Run difference-in-differences
did_results <- difference_in_differences(
  data = did_data_simple,
  outcome_vars = c("employment_rate", "permanent_contract_rate"),
  treatment_var = "is_treated",
  time_var = "post",
  id_var = "cf"
)

# ===== WHEN TO USE THIS FUNCTION =====
# Use this function when:
# 1. The main function reports person count discrepancies
# 2. You have already prepared proper pre/post panel data
# 3. Your treatment assignment is already at person level
# 4. You want predictable, transparent data processing

# ===== MIGRATION FROM MAIN FUNCTION =====
# If experiencing issues with prepare_metrics_for_impact_analysis():

# Instead of this (complex):
# did_data <- prepare_metrics_for_impact_analysis(
#   metrics_output = metrics,
#   treatment_assignment = treatment,
#   impact_method = "did",
#   auto_detect_outcomes = TRUE
# )

# Use this (simple):
did_data_simple <- prepare_impact_data_simple(
  metrics_output = metrics,
  treatment_data = treatment,  # Must be person-level
  outcome_vars = NULL  # Will auto-detect
)

# ===== TROUBLESHOOTING GUIDE =====
# Common issues and solutions:

# Error: "Treatment data has duplicate person IDs"
# Solution: Deduplicate treatment data first:
# treatment_clean <- treatment_data[, .SD[1], by = cf]

# Error: "No pre/post structure found"
# Solution: Ensure your metrics have proper time periods:
# table(metrics_result$period)  # Should show "pre" and "post"

# Error: "No numeric outcome variables detected"
# Solution: Specify outcome variables explicitly:
# prepare_impact_data_simple(..., outcome_vars = c("employment_rate"))
}

}
\seealso{
\code{\link{prepare_metrics_for_impact_analysis}} (main complex function),
\code{\link{calculate_comprehensive_impact_metrics}},
\code{\link{difference_in_differences}}
}
